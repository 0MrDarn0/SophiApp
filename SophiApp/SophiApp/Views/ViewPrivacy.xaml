<UserControl x:Class="SophiApp.Views.ViewPrivacy"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:controls="clr-namespace:SophiApp.Controls"
             xmlns:converters="clr-namespace:SophiApp.Converters"
             xmlns:models="clr-namespace:SophiApp.Models"
             xmlns:local="clr-namespace:SophiApp.Views"
             mc:Ignorable="d"
             IsVisibleChanged="ViewPrivacy_IsVisibleChanged"
             controls:Switch.MouseEnter="TextedElement_MouseEnter"
             controls:Switch.MouseLeave="TextedElement_MouseLeave"
             controls:CheckBox.MouseEnter="TextedElement_MouseEnter"
             controls:CheckBox.MouseLeave="TextedElement_MouseLeave"
             controls:RadioButton.MouseEnter="TextedElement_MouseEnter"
             controls:RadioButton.MouseLeave="TextedElement_MouseLeave">

    <UserControl.Resources>
        <converters:InverseBool x:Key="InverseBoolConverter" />
        <converters:TagToVisibility x:Key="TagToVisibilityConverter" />
        <converters:IntToVisibilityCollapsed x:Key="IntToVisibilityCollapsedConverter" />
        <CollectionViewSource x:Key="RadioButtonGroupCollection" Source="{Binding RadioButtonGroupElements}" Filter="RadioButtonGroupCollectionFilter" />
        <CollectionViewSource x:Key="TextedElementsCollection" Source="{Binding TextedElements}" Filter="TextedElementsCollectionFilter" />
        <CollectionViewSource x:Key="ExpandingGroupCollection" Source="{Binding ExpandingGroupElements}" Filter="ExpandingGroupCollectionFilter" />
        <CompositeCollection x:Key="CommonCollection">
            <CollectionContainer Collection="{Binding Source={StaticResource RadioButtonGroupCollection}}" />
            <CollectionContainer Collection="{Binding Source={StaticResource TextedElementsCollection}}" />
            <CollectionContainer Collection="{Binding Source={StaticResource ExpandingGroupCollection}}" />
        </CompositeCollection>
        <Thickness x:Key="Animation.Page.Margin">0, 10, 0, 0</Thickness>
        <Storyboard x:Key="Animation.Page.Visible">
            <ThicknessAnimation Storyboard.TargetProperty="Margin"
                            From="{StaticResource Animation.Page.Margin}"
                            To="0, 0, 0, 0"
                            Duration="0:0:0.2" />
        </Storyboard>
        <Style TargetType="{x:Type ItemsControl}">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="IsTabStop" Value="False" />
        </Style>
        <Style x:Key="Style.Panel.Description" TargetType="{x:Type StackPanel}">
            <Setter Property="Background" Value="{DynamicResource Brush.Window.Background}" />
            <Setter Property="Grid.Column" Value="2" />
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="Style.TextBlock.Description">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="TextOptions.TextHintingMode" Value="Fixed" />
         <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
            <Setter Property="TextOptions.TextRenderingMode" Value="Auto" />
            <Setter Property="FontFamily" Value="{StaticResource SegoeUI}" />
            <Setter Property="FontWeight" Value="Regular" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="TextWrapping" Value="Wrap" />
            <Setter Property="Margin" Value="10" />
            <Setter Property="Text" Value="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}" />
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="Style.TextBlock.Header">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
            <Setter Property="TextOptions.TextRenderingMode" Value="Auto" />
            <Setter Property="FontFamily" Value="{StaticResource SegoeUI}" />
            <Setter Property="FontSize" Value="28" />
            <Setter Property="FontWeight" Value="Regular" />
            <Setter Property="Grid.Row" Value="0" />
            <Setter Property="VerticalAlignment" Value="Bottom" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Text" Value="{Binding Path=Header, RelativeSource={RelativeSource TemplatedParent}}" />
            <Setter Property="Margin" Value="20, 0, 0, 20" />
        </Style>
        <Style TargetType="{x:Type local:ViewPrivacy}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Background" Value="{DynamicResource Brush.View.Background}" />
            <Setter Property="Foreground" Value="{DynamicResource Brush.Window.Foreground}" />
            <Setter Property="Header" Value="{DynamicResource Localization.Privacy}" />
            <Setter Property="Tag" Value="{StaticResource Tags.View.Privacy}" />
            <Setter Property="IsHitTestVisible" Value="{Binding LoadingPanelVisibility, Converter={StaticResource InverseBoolConverter}, UpdateSourceTrigger=PropertyChanged}" />
            <Setter Property="Visibility">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource TagToVisibilityConverter}">
                        <Binding Path="VisibleViewByTag" UpdateSourceTrigger="PropertyChanged" />
                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <UserControl.Template>
        <ControlTemplate>
            <Grid Background="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="6*" />
                    <ColumnDefinition Width="3*" />
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="80" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="20" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <TextBlock Style="{StaticResource Style.TextBlock.Header}" />

                    <controls:ResetViewButton Grid.Row="0"
                                              VerticalAlignment="Bottom"
                                              HorizontalAlignment="Right"
                                              Margin="0, 0, 47, 20"
                                              Command="{Binding ResetAllElementStateCommand}" />

                    <ScrollViewer x:Name="ScrollViewerContent"
                                  CanContentScroll="True"
                                  Grid.Row="1"
                                  Background="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}"
                                  BorderBrush="{DynamicResource Brush.Window.Foreground}"
                                  IsTabStop="False"
                                  Focusable="False">

                        <ItemsControl ItemsSource="{Binding Source={StaticResource CommonCollection}}"
                                      Margin="0, 16, 0, 0">
                            <ItemsControl.Resources>
                                <DataTemplate DataType="{x:Type models:Switch}">
                                    <controls:Switch Command="{Binding Path=DataContext.TextedElementClickedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:ViewPrivacy}}}"
                                                     CommandParameter="{Binding Id}" />
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type models:RadioButtonGroup}">
                                    <controls:RadioButtonGroup Command="{Binding Path=DataContext.RadioButtonGroupElementClickedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:ViewPrivacy}}}" />
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type models:CheckBox}">
                                    <controls:CheckBox Command="{Binding Path=DataContext.TextedElementClickedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:ViewPrivacy}}}"
                                                       CommandParameter="{Binding Id}" />
                                </DataTemplate>
                                <DataTemplate DataType="{x:Type models:ExpandingGroup}">
                                    <controls:ExpandingGroup Command="{Binding Path=DataContext.TextedElementClickedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:ViewPrivacy}}}" />
                                </DataTemplate>
                            </ItemsControl.Resources>
                        </ItemsControl>
                    </ScrollViewer>
                    <controls:LoadingPanel x:Name="LoadingPanel" Grid.Row="3" />
                    <controls:ChangesPanel x:Name="ChangesPanel" Grid.Row="3" />
                </Grid>
                <StackPanel Style="{DynamicResource Style.Panel.Description}">
                    <TextBlock Style="{DynamicResource Style.TextBlock.Description}" />
                </StackPanel>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="Visibility" Value="Visible">
                    <Trigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource Animation.Page.Visible}" />
                    </Trigger.EnterActions>
                </Trigger>
                <Trigger Property="Visibility" Value="Collapsed">
                    <Setter Property="Margin" Value="{StaticResource Animation.Page.Margin}" />
                </Trigger>
                <MultiDataTrigger>
                    <!--LoadingPanel visibility trigger-->
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding VisibleViewByTag}" Value="{StaticResource Tags.View.Privacy}" />
                        <Condition Binding="{Binding LoadingPanelVisibility}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="LoadingPanel" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <!--ChangesPanel visibility trigger-->
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding VisibleViewByTag}" Value="{StaticResource Tags.View.Privacy}" />
                        <Condition Binding="{Binding TextedElementsChangedCounter, Converter={StaticResource IntToVisibilityCollapsedConverter}}" Value="Visible" />
                        <Condition Binding="{Binding LoadingPanelVisibility}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ChangesPanel" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </UserControl.Template>
</UserControl>